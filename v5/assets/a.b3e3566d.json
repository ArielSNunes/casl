{"title":"CASL Vue","categories":["package"],"order":125,"meta":{"keywords":null,"description":null},"content":"<h1 id=\"casl-vue\"><a name=\"casl-vue\" class=\"h-link\" href=\"#\"></a>CASL Vue</h1>\n<p><a href=\"https://badge.fury.io/js/%40casl%2Fvue\" target=\"_blank\" rel=\"noopener nofollow\"><img src=\"https://badge.fury.io/js/%40casl%2Fvue.svg\" alt=\"@casl/vue NPM version\"></a>\n<a href=\"https://www.npmjs.com/package/%40casl%2Fvue\" target=\"_blank\" rel=\"noopener nofollow\"><img src=\"https://img.shields.io/npm/dm/%40casl%2Fvue.svg\" alt=\"\"></a>\n<a href=\"https://gitter.im/stalniy-casl/casl\" target=\"_blank\" rel=\"noopener nofollow\"><img src=\"https://badges.gitter.im/Join%20Chat.svg\" alt=\"CASL Join the chat\"></a></p>\n<p>This package allows to integrate <code>@casl/ability</code> with <a href=\"https://vuejs.org/\" target=\"_blank\" rel=\"noopener nofollow\">Vue</a> application. So, you can show or hide UI elements based on user ability to see them. This package provides a Vue plugin which defines <code>$ability</code> object and <code>$can</code> method for all components. Also package provides functional <code>Can</code> component (not included in the plugin), both allow to hide or show UI elements based on the user ability to see them.</p>\n<h2 id=\"installation\"><a name=\"installation\" class=\"h-link\" href=\"#\"></a>Installation</h2>\n<pre><code class=\"hljs language-sh\">npm install @casl/vue @casl/ability\n<span class=\"hljs-comment\"># or</span>\nyarn add @casl/vue @casl/ability\n<span class=\"hljs-comment\"># or</span>\npnpm add @casl/vue @casl/ability\n</code></pre>\n<h2 id=\"getting-started\"><a name=\"getting-started\" class=\"h-link\" href=\"#\"></a>Getting started</h2>\n<p>If you don't plan to use multiple <code>Ability</code> instances across your application (99.9% likelihood that you don't), you can pass <code>Ability</code> instance as a 2nd argument to <code>Vue.use</code>:</p>\n<pre><code data-filename=\"main.js\" class=\"language-js\"><span class=\"hljs-keyword\">import</span> Vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { abilitiesPlugin } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/vue&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> ability <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./services/ability&#x27;</span>;\n\nVue.use(abilitiesPlugin, ability);\n</code></pre>\n<p>but if you one from that 0.1%, you need to pass it in <code>Vue</code> constructor:</p>\n<pre><code data-filename=\"main.js\" class=\"language-js\"><span class=\"hljs-keyword\">import</span> Vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { abilitiesPlugin } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/vue&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> ability <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./services/ability&#x27;</span>;\n\nVue.use(abilitiesPlugin);\n\n<span class=\"hljs-keyword\">new</span> Vue({\n  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,\n  ability\n})\n</code></pre>\n<p>The difference is that the 1st approach defines <code>Ability</code> instance on <code>Vue.prototype</code> and 2nd one passes ability from parent to child in component tree.</p>\n<blockquote>\n<p>The 2nd approach potentially may slowdown components creation but you will not notice this ;)</p>\n</blockquote>\n<p>The plugin doesn't register <code>Can</code> component, so you can decide whether to use it or not. In most cases, <code>$can</code> function is enough and it's more lightweight than <code>Can</code> component.</p>\n<p>To use <code>Can</code> functional component, you need to import it in a particular component or register it globally:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> Vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { Can } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/vue&#x27;</span>;\n\nVue.component(<span class=\"hljs-string\">&#x27;Can&#x27;</span>, Can);\n</code></pre>\n<blockquote>\n<p>See <a href=\"https://casl.js.org/v5/en/guide/intro\" target=\"_blank\" rel=\"noopener nofollow\">CASL guide</a> to learn how to define <code>Ability</code> instance.</p>\n</blockquote>\n<h2 id=\"check-permissions-in-templates\"><a name=\"check-permissions-in-templates\" class=\"h-link\" href=\"#\"></a>Check permissions in templates</h2>\n<p>To check permissions, you can use <code>$can</code> method in any component, it accepts the same arguments as <code>Ability</code>'s <code>can</code>:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">&quot;$can(&#x27;create&#x27;, &#x27;Post&#x27;)&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;createPost&quot;</span>&gt;</span>Add Post<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n</code></pre>\n<h2 id=\"can-component\"><a name=\"can-component\" class=\"h-link\" href=\"#\"></a>Can component</h2>\n<p>There is an alternative way you can check your permissions in the app by using the <code>Can</code> component. Instead of using <code>v-if=&quot;$can(...)&quot;</code>, we can do this:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Can</span> <span class=\"hljs-attr\">I</span>=<span class=\"hljs-string\">&quot;create&quot;</span> <span class=\"hljs-attr\">a</span>=<span class=\"hljs-string\">&quot;Post&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;createPost&quot;</span>&gt;</span>Add Post<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Can</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n</code></pre>\n<p>It accepts default slot and 5 properties:</p>\n<ul>\n<li>\n<p><code>do</code> - name of the action (e.g., <code>read</code>, <code>update</code>). Has an alias <code>I</code></p>\n</li>\n<li>\n<p><code>on</code> - checked subject. Has <code>a</code>, <code>an</code>, <code>this</code> aliases</p>\n</li>\n<li>\n<p><code>field</code> - checked field</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Can</span> <span class=\"hljs-attr\">I</span>=<span class=\"hljs-string\">&quot;read&quot;</span> <span class=\"hljs-attr\">:this</span>=<span class=\"hljs-string\">&quot;post&quot;</span> <span class=\"hljs-attr\">field</span>=<span class=\"hljs-string\">&quot;title&quot;</span>&gt;</span>\n  Yes, you can do this! ;)\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Can</span>&gt;</span>\n</code></pre>\n</li>\n<li>\n<p><code>not</code> - inverts ability check and show UI if user cannot do some action:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Can</span> <span class=\"hljs-attr\">not</span> <span class=\"hljs-attr\">I</span>=<span class=\"hljs-string\">&quot;create&quot;</span> <span class=\"hljs-attr\">a</span>=<span class=\"hljs-string\">&quot;Post&quot;</span>&gt;</span>\n  You are not allowed to create a post\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Can</span>&gt;</span>\n</code></pre>\n</li>\n<li>\n<p><code>passThrough</code> - renders children in spite of what <code>ability.can</code> returns. This is useful for creating custom components based on <code>Can</code>. For example, if you need to disable button based on user permissions:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Can</span> <span class=\"hljs-attr\">I</span>=<span class=\"hljs-string\">&quot;delete&quot;</span> <span class=\"hljs-attr\">a</span>=<span class=\"hljs-string\">&quot;Post&quot;</span> <span class=\"hljs-attr\">passThrough</span> <span class=\"hljs-attr\">v-slot</span>=<span class=\"hljs-string\">&quot;{ allowed }&quot;</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">:disabled</span>=<span class=\"hljs-string\">&quot;!allowed&quot;</span>&gt;</span>Delete post<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Can</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n</code></pre>\n</li>\n</ul>\n<p><code>Can</code> component has several downsides in comparison to <code>$can</code> function.</p>\n<ol>\n<li>It's more expensive to use because Vue needs to spend some time creating it</li>\n<li>It adds additional nesting, that makes code harder to read</li>\n</ol>\n<h3 id=\"property-names-and-aliases\"><a name=\"property-names-and-aliases\" class=\"h-link\" href=\"#\"></a>Property names and aliases</h3>\n<p>As you can see from the code above, the component name and its property names and values create an English sentence, actually a question. The example above reads as &quot;Can I create a Post?&quot;.</p>\n<p>There are several other property aliases which allow constructing a readable question:</p>\n<ul>\n<li>\n<p>use the <code>a</code> (or <code>an</code>) alias when you check by Type</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Can</span> <span class=\"hljs-attr\">I</span>=<span class=\"hljs-string\">&quot;read&quot;</span> <span class=\"hljs-attr\">a</span>=<span class=\"hljs-string\">&quot;Post&quot;</span>&gt;</span>...<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Can</span>&gt;</span>\n</code></pre>\n</li>\n<li>\n<p>use <code>this</code> alias instead of <code>a</code> when you check action on a particular instance. So, the question can be read as &quot;Can I read this <em>particular</em> post?&quot;</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Can</span> <span class=\"hljs-attr\">I</span>=<span class=\"hljs-string\">&quot;read&quot;</span> <span class=\"hljs-attr\">:this</span>=<span class=\"hljs-string\">&quot;post&quot;</span>&gt;</span>...<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Can</span>&gt;</span>\n</code></pre>\n</li>\n<li>\n<p>use <code>do</code> and <code>on</code> if you are bored and don't want to make your code more readable :)</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Can</span> <span class=\"hljs-attr\">do</span>=<span class=\"hljs-string\">&quot;read&quot;</span> <span class=\"hljs-attr\">:on</span>=<span class=\"hljs-string\">&quot;post&quot;</span>&gt;</span>...<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Can</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Can</span> <span class=\"hljs-attr\">do</span>=<span class=\"hljs-string\">&quot;read&quot;</span> <span class=\"hljs-attr\">:on</span>=<span class=\"hljs-string\">&quot;post&quot;</span> <span class=\"hljs-attr\">field</span>=<span class=\"hljs-string\">&quot;title&quot;</span>&gt;</span>...<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Can</span>&gt;</span>\n</code></pre>\n</li>\n</ul>\n<h2 id=\"type-script-support\"><a name=\"type-script-support\" class=\"h-link\" href=\"#\"></a>TypeScript support</h2>\n<p>The package is written in TypeScript, so don't worry that you need to keep all the properties and aliases in mind. If you use TypeScript, your IDE will suggest you the correct usage and TypeScript will warn you if you make a mistake.</p>\n<p>To define application specific <code>Ability</code> type, create a separate file, for example:</p>\n<pre><code data-filename=\"AppAbility.ts\" class=\"language-ts\"><span class=\"hljs-keyword\">import</span> { Ability, AbilityClass } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n\n<span class=\"hljs-keyword\">type</span> Actions = <span class=\"hljs-string\">&#x27;create&#x27;</span> | <span class=\"hljs-string\">&#x27;read&#x27;</span> | <span class=\"hljs-string\">&#x27;update&#x27;</span> | <span class=\"hljs-string\">&#x27;delete&#x27;</span>;\n<span class=\"hljs-keyword\">type</span> Subjects = <span class=\"hljs-string\">&#x27;Article&#x27;</span> | <span class=\"hljs-string\">&#x27;User&#x27;</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">type</span> AppAbility = Ability&lt;[Actions, Subjects]&gt;;\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> AppAbility = Ability <span class=\"hljs-keyword\">as</span> AbilityClass&lt;AppAbility&gt;;\n</code></pre>\n<p>By default, <code>Vue['$ability']</code> is declared as <code>AnyAbility</code> type. So, to make it more useful for our app, we need to redeclare <code>Vue['$ability']</code> type. To do so, create <code>src/shims-ability.d.ts</code> file:</p>\n<pre><code data-filename=\"shims-ability.d.ts\" class=\"language-ts\"><span class=\"hljs-keyword\">import</span> { AppAbility } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./AppAbility&#x27;</span>\n\n<span class=\"hljs-keyword\">declare</span> <span class=\"hljs-built_in\">module</span> <span class=\"hljs-string\">&#x27;vue/types/vue&#x27;</span> {\n  <span class=\"hljs-keyword\">interface</span> Vue {\n    <span class=\"hljs-attr\">$ability</span>: AppAbility;\n    $can(<span class=\"hljs-built_in\">this</span>: <span class=\"hljs-built_in\">this</span>, ...args: Parameters&lt;<span class=\"hljs-built_in\">this</span>[<span class=\"hljs-string\">&#x27;$ability&#x27;</span>][<span class=\"hljs-string\">&#x27;can&#x27;</span>]&gt;): <span class=\"hljs-built_in\">boolean</span>;\n  }\n}\n<span class=\"hljs-keyword\">declare</span> <span class=\"hljs-built_in\">module</span> <span class=\"hljs-string\">&#x27;vue/types/options&#x27;</span> {\n  <span class=\"hljs-keyword\">interface</span> ComponentOptions&lt;V <span class=\"hljs-keyword\">extends</span> Vue&gt; {\n    ability?: AppAbility;\n  }\n}\n</code></pre>\n<p>And update <code>tsconfig.json</code> to replace default vue modules augmentation (i.e., <code>@casl/vue/patch</code>) with application specific:</p>\n<pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-attr\">&quot;compilerOptions&quot;</span>: {\n    <span class=\"hljs-comment\">// other options</span>\n    <span class=\"hljs-attr\">&quot;baseUrl&quot;</span>: <span class=\"hljs-string\">&quot;.&quot;</span>,\n    <span class=\"hljs-attr\">&quot;paths&quot;</span>: {\n      <span class=\"hljs-comment\">// other mappings</span>\n      <span class=\"hljs-attr\">&quot;@casl/vue/patch&quot;</span>: [\n        <span class=\"hljs-string\">&quot;src/shims-ability.d.ts&quot;</span>\n      ]\n    }\n  },\n  <span class=\"hljs-comment\">// other options</span>\n}\n</code></pre>\n<blockquote>\n<p>Read <a href=\"https://vuejs.org/v2/guide/typescript.html\" target=\"_blank\" rel=\"noopener nofollow\">Vue TypeScript</a> to understand why it's so hard to properly type Vue plugins.</p>\n</blockquote>\n<h2 id=\"update-ability-instance\"><a name=\"update-ability-instance\" class=\"h-link\" href=\"#\"></a>Update Ability instance</h2>\n<p>Majority of applications that need permission checking support have something like <code>AuthService</code> or <code>LoginService</code> or <code>Session</code> service (name it as you wish) which is responsible for user login/logout functionality. Whenever user login (and logout), we need to update <code>Ability</code> instance with new rules. Usually you will do this in your <code>LoginComponent</code>.</p>\n<p>Let's imagine that server returns user with a role on login:</p>\n<pre><code data-filename=\"Login.vue\" class=\"language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> @<span class=\"hljs-attr\">submit.prevent</span>=<span class=\"hljs-string\">&quot;login&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;email&quot;</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&quot;email&quot;</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;password&quot;</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&quot;password&quot;</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;submit&quot;</span>&gt;</span>Login<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">import</span> { AbilityBuilder, Ability } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;LoginForm&#x27;</span>,\n  <span class=\"hljs-attr\">data</span>: <span class=\"hljs-function\">() =&gt;</span> ({\n    <span class=\"hljs-attr\">email</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,\n    <span class=\"hljs-attr\">password</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>\n  }),\n  <span class=\"hljs-attr\">methods</span>: {\n    <span class=\"hljs-function\"><span class=\"hljs-title\">login</span>(<span class=\"hljs-params\"></span>)</span> {\n      <span class=\"hljs-keyword\">const</span> { email, password } = <span class=\"hljs-built_in\">this</span>;\n      <span class=\"hljs-keyword\">const</span> params = { <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">&#x27;POST&#x27;</span>, <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ email, password }) };\n\n      <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">&#x27;path/to/api/login&#x27;</span>, params)\n        .then(<span class=\"hljs-function\"><span class=\"hljs-params\">response</span> =&gt;</span> response.json())\n        .then(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ user }</span>) =&gt;</span> <span class=\"hljs-built_in\">this</span>.updateAbility(user));\n    },\n    <span class=\"hljs-function\"><span class=\"hljs-title\">updateAbility</span>(<span class=\"hljs-params\">user</span>)</span> {\n      <span class=\"hljs-keyword\">const</span> { can, rules } = <span class=\"hljs-keyword\">new</span> AbilityBuilder(Ability);\n\n      <span class=\"hljs-keyword\">if</span> (user.role === <span class=\"hljs-string\">&#x27;admin&#x27;</span>) {\n        can(<span class=\"hljs-string\">&#x27;manage&#x27;</span>, <span class=\"hljs-string\">&#x27;all&#x27;</span>);\n      } <span class=\"hljs-keyword\">else</span> {\n        can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;all&#x27;</span>);\n      }\n\n      <span class=\"hljs-built_in\">this</span>.$ability.update(rules);\n    }\n  }\n};\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<blockquote>\n<p>See <a href=\"https://casl.js.org/v5/en/guide/define-rules\" target=\"_blank\" rel=\"noopener nofollow\">Define rules</a> to get more information of how to define <code>Ability</code></p>\n</blockquote>\n<h2 id=\"want-to-help\"><a name=\"want-to-help\" class=\"h-link\" href=\"#\"></a>Want to help?</h2>\n<p>Want to file a bug, contribute some code, or improve documentation? Excellent! Read up on guidelines for <a href=\"https://github.com/stalniy/casl/blob/master/CONTRIBUTING.md\" target=\"_blank\" rel=\"noopener nofollow\">contributing</a>.</p>\n<p>If you'd like to help us sustain our community and project, consider <a href=\"https://opencollective.com/casljs/contribute\" target=\"_blank\" rel=\"noopener nofollow\">to become a financial contributor on Open Collective</a></p>\n<blockquote>\n<p>See <a href=\"https://casl.js.org/v5/en/support-casljs\" target=\"_blank\" rel=\"noopener nofollow\">Support CASL</a> for details</p>\n</blockquote>\n<h2 id=\"license\"><a name=\"license\" class=\"h-link\" href=\"#\"></a>License</h2>\n<p><a href=\"http://www.opensource.org/licenses/MIT\" target=\"_blank\" rel=\"noopener nofollow\">MIT License</a></p>","headings":[{"id":"casl-vue","title":"CASL Vue"},{"id":"installation","title":"Installation"},{"id":"getting-started","title":"Getting started"},{"id":"check-permissions-in-templates","title":"Check permissions in templates"},{"id":"can-component","title":"Can component"},{"id":"property-names-and-aliases","title":"Property names and aliases"},{"id":"type-script-support","title":"TypeScript support"},{"id":"update-ability-instance","title":"Update Ability instance"},{"id":"want-to-help","title":"Want to help?"},{"id":"license","title":"License"}],"id":"package/casl-vue"}